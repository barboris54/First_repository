class Dog():
    """Простоая модель собаки"""

    def __init__(self,name,age):
        """Инициализурует атрибуты name и age"""
        self.name = name
        self.age = age
    def sit(self):
        """Собака садиться по команде"""
        print(f'{self.name} is now sitting')
    def roll_over(self):
        """Собака перекатываеться по команде"""
        print(f'{self.name} rolled over !')

# Функция, являющаяся частью класса, называется методом. Все, что вы узнали
# ранее о функциях, также относится и к методам; единственное практическое различие — способ вызова методов. Метод __init__() в точке  — специальный метод,
# 172 Глава 9 • Классы
# который автоматически выполняется при создании каждого нового экземпляра на
# базе класса Dog. Имя метода начинается и заканчивается двумя символами подчеркивания; эта схема предотвращает конфликты имен стандартных методов Python
# и методов ваших классов.

# Метод __init__() определяется с тремя параметрами: self, name и age. Параметр self обязателен в определении метода; он должен предшествовать всем
# остальным параметрам. Он должен быть включен в определение, потому что
# при будущем вызове метода __init__() (для создания экземпляра Dog) Python
# автоматически передает аргумент self. При каждом вызове метода, связанного
# с классом, автоматически передается self — ссылка на экземпляр; она предоставляет конкретному экземпляру доступ к атрибутам и методам класса. Когда
# вы создаете экземпляр Dog, Python вызывает метод __init__() из класса Dog. Мы
# передаем Dog() кличку и возраст в аргументах; значение self передается автоматически, так что его передавать не нужно. Каждый раз, когда вы захотите создать
# экземпляр на основе класса Dog, необходимо предоставить значения только двух
# последних аргументов, name и age.

my_dog = Dog('willie',6)
print(f'my dog name is {my_dog.name}!')
print(f'my dog is {my_dog.age} years old')