# Для начала нам понадобится файл с несколькими строками текста. Пусть это будет
# файл с числом «пи» с точностью до 30 знаков, по 10 знаков на строку

# Следующая программа открывает этот файл, читает его и выводит содержимое на
# экран:


with open('pi_digits.txt') as file_object:
    contents = file_object.read()
print(contents)


# л. Функция open()
# получает один аргумент: имя открываемого файла. Python ищет файл с указанным
# именем в каталоге, в котором находится файл текущей программы. В данном примере выполняется программа file_reader.py, поэтому Python ищет файл pi_digits.txt
# в каталоге, в котором хранится file_reader.py. Функция open() возвращает объект,
# представляющий файл. В данном случае open('pi_digits.txt') возвращает объект, представляющий файл pi_digits.txt. Python сохраняет этот объект в переменной
# file_object, с которой мы будем работать позднее в программе


# Конструкция с ключевым словом with закрывает файл после того, как надобность
# в нем отпадет. Обратите внимание: в этой программе есть вызов open(), но нет
# вызова close(). Файлы можно открывать и закрывать явными вызовами open()
# и close(); но если из-за ошибки в программе команда close() останется невыполненной, то файл не будет закрыт.
# На первый взгляд это не страшно, но некорректное закрытие файлов может привести к потере или порче данных. А если функция
# close() будет вызвана слишком рано, программа попытается работать с закрытым
# (то есть недоступным) файлом, что приведет к новым ошибкам. Не всегда можно
# заранее определить, когда нужно закрывать файл, но с приведенной конструкцией
# Python сделает это за вас. Вам остается лишь открыть файл и работать с ним так,
# как требуется, надеясь на то, что Python закроет его автоматически при завершении
# блока with.

# После того как в программе появится объект, представляющий файл pi_digits.txt, во
# второй строке программы используется метод read(), который читает все содержимое файла и сохраняет его в одной длинной строке в переменной contents.